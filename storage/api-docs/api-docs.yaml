openapi: 3.0.0
info:
  title: 'L5 OpenApi'
  description: 'L5 Swagger OpenApi description'
  contact:
    email: darius@matulionis.lt
  license:
    name: 'Apache 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
paths:
  /api/articles:
    get:
      tags:
        - Articles
      summary: 'Get list of Articles'
      description: 'Returns list of Articles'
      operationId: indexArticles
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  '/api/articles/{id}':
    get:
      tags:
        - Articles
      summary: 'Get a list of articles'
      description: 'Retrieve a list of articles from the database.'
      operationId: b3e529eab04efb5d305b07e2e58d9869
      responses:
        200:
          description: 'List of articles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  /articles:
    post:
      tags:
        - Articles
      summary: 'Insert a new Article'
      description: 'Insert a new Article'
      operationId: storeArticle
      requestBody:
        description: 'Article to create'
        required: true
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/Article'
              type: object
      responses:
        201:
          description: 'Article created'
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                type: object
        422:
          description: 'Validation exception'
  '/articles/{article_id}':
    get:
      tags:
        - Articles
      summary: 'Show a Article from his Id'
      description: 'Show a Article from his Id'
      operationId: showArticle
      parameters:
        -
          $ref: '#/components/parameters/Article--id'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                type: object
        404:
          description: 'Article not found'
    delete:
      tags:
        - Articles
      summary: 'Delete a Article'
      description: 'Delete a Article'
      operationId: destroyArticle
      parameters:
        -
          $ref: '#/components/parameters/Article--id'
      responses:
        204:
          description: 'No content'
        404:
          description: 'Article not found'
  /:
    get:
      description: 'Home page'
      responses:
        default:
          description: 'Welcome page'
  /api/products:
    get:
      tags:
        - Products
      summary: 'Get list of Product'
      description: 'Returns list of Product'
      operationId: indexProduct
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
  /products:
    post:
      tags:
        - Products
      summary: 'Insert a new Product'
      description: 'Insert a new Product'
      operationId: storeProduct
      requestBody:
        description: 'Product to create'
        required: true
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/Product'
              type: object
      responses:
        201:
          description: 'Product created'
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                type: object
        422:
          description: 'Validation exception'
  'api/products/{product_id}':
    get:
      tags:
        - Products
      summary: 'Show a Product from his Id'
      description: 'Show a Product from his Id'
      operationId: showProduct
      parameters:
        -
          $ref: '#/components/parameters/Product--id'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                type: object
        404:
          description: 'Product not found'
  '/products/{product_id}':
    delete:
      tags:
        - Products
      summary: 'Delete a Product'
      description: 'Delete a Product'
      operationId: destroyProduct
      parameters:
        -
          $ref: '#/components/parameters/Product--id'
      responses:
        204:
          description: 'No content'
        404:
          description: 'Product not found'
    patch:
      tags:
        - Products
      summary: 'Update an existing Product'
      description: 'Update an existing Product'
      operationId: updateProduct
      parameters:
        -
          $ref: '#/components/parameters/Product--id'
      requestBody:
        description: 'Product to update'
        required: true
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/Product'
              type: object
      responses:
        204:
          description: 'No content'
components:
  schemas:
    Article:
      title: Article
      description: 'Article object'
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      type: object
    Articles:
      title: Articles
      properties:
        data:
          title: data
          type: array
          items:
            $ref: '#/components/schemas/Article'
      type: object
    Product:
      title: Product
      description: 'Product model'
      required: []
      properties:
        id:
          title: id
          description: 'id of Product'
          type: integer
          readOnly: 'true'
          example: '1'
        name:
          title: name
          description: 'name of Product'
          type: string
          example: 'Macbook Pro'
        sku:
          title: sku
          description: 'sku of Product'
          type: string
          example: MCBPRO2022
        price:
          title: price
          description: 'price of Product'
          type: integer
          example: '99'
        created_at:
          title: created_at
          type: dateTime
          readOnly: 'true'
          example: '2022-07-04T02:41:42.336Z'
        updated_at:
          title: updated_at
          type: dateTime
          readOnly: 'true'
          example: '2022-07-04T02:41:42.336Z'
      type: object
    Products:
      title: Products
      properties:
        data:
          title: data
          type: array
          items:
            $ref: '#/components/schemas/Product'
      type: object
  parameters:
    Article--id:
      name: Article_id
      in: path
      description: 'Id of Article'
      required: true
      schema:
        type: integer
        example: '1'
    Product--id:
      name: Product_id
      in: path
      description: 'Id of Product'
      required: true
      schema:
        type: integer
        example: '1'
